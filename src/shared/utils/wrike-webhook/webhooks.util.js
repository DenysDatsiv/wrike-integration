// shared/utils/webhooks.util.js
// –ü–µ—Ä–µ–≤—ñ—Ä —à–ª—è—Ö–∏ —ñ–º–ø–æ—Ä—Ç—ñ–≤ –ø—ñ–¥ —Å–≤—ñ–π –ø—Ä–æ—î–∫—Ç

const { wrike, WEBHOOK_SECRET, PUBLIC_BASE_URL } = require("../../../configurations/env.variables");
const { toPlainError } = require("./helpers.util");

// –í–ê–õ–Ü–î–ù–ò–ô —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Wrike: "[TaskCreated,CommentAdded]"
const WANT_EVENTS = ["TaskCreated", "CommentAdded"];
const EVENTS_STRING = `[${WANT_EVENTS.join(",")}]`;

/**
 * –†–µ–≥—ñ—Å—Ç—Ä—É—î –≤–µ–±—Ö—É–∫ –Ω–∞ baseUrl (–∞–±–æ –±–µ—Ä–µ PUBLIC_BASE_URL –∑ env).
 * –ü–æ—Ä–∞–¥–∞: –¥–ª—è Render –Ω–µ –∑–∞–ø—É—Å–∫–∞–π —Å–µ—Ä–≤–µ—Ä —É build-–∫–æ–º–∞–Ω–¥—ñ ‚Äî –∑—Ä–æ–±–∏ Start Command –æ–∫—Ä–µ–º–æ.
 */
sync function ensureWebhookRegistered(baseUrlOverride) {
    const base = (baseUrlOverride || PUBLIC_BASE_URL || "").replace(/\/$/, "");
    if (!base) throw new Error("PUBLIC_BASE_URL –Ω–µ –∑–∞–¥–∞–Ω–æ");
    if (!WEBHOOK_SECRET) throw new Error("WEBHOOK_SECRET –Ω–µ –∑–∞–¥–∞–Ω–æ");

    const hookUrl = `${base}/wrike/webhook`;

    console.log("üîÑ Registering webhook at:", hookUrl);

    // Remove existing webhook
    let list = [];
    try {
        const resp = await wrike.get("/webhooks");
        list = resp?.data?.data || [];
        console.log(`üìã Found ${list.length} existing webhooks`);
    } catch (e) {
        console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–µ–±—Ö—É–∫—ñ–≤:", toPlainError(e));
    }

    const existing = list.find(w => w.hookUrl === hookUrl);
    if (existing?.id) {
        try {
            await wrike.delete(`/webhooks/${encodeURIComponent(existing.id)}`);
            console.log(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–µ–±—Ö—É–∫: ${existing.id}`);
        } catch (e) {
            console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –≤–µ–±—Ö—É–∫:", toPlainError(e));
        }
    }

    // Create new webhook with proper form encoding
    const body = new URLSearchParams();
    body.set("hookUrl", hookUrl);
    body.set("secret", WEBHOOK_SECRET);
    body.set("events", EVENTS_STRING); // "[TaskCreated,CommentAdded]"

    console.log("üì§ Creating webhook with events:", EVENTS_STRING);

    try {
        const {data} = await wrike.post("/webhooks", body.toString(), {
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "Accept": "application/json"
            },
            timeout: 30000 // 30 second timeout
        });

        const created = data?.data?.[0];
        if (!created?.id) throw new Error("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –≤—ñ–¥–±—É–ª–æ—Å—è –±–µ–∑ ID —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ");

        console.log("‚úÖ –í–µ–±—Ö—É–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ:");
        console.log("   ID:", created.id);
        console.log("   URL:", created.hookUrl);
        console.log("   Events:", created.events);

        return created;
    } catch (e) {
        const errText = toPlainError(e);
        console.error("‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞ –Ω–µ –≤–¥–∞–ª–æ—Å—è:");
        console.error("   Error:", errText);
        console.error("   Status:", e?.response?.status);
        console.error("   Data:", e?.response?.data);

        if (/handshake/i.test(errText)) {
            console.error("üí° Handshake failed - check:");
            console.error("   1. Your server is publicly accessible");
            console.error("   2. HTTPS is working properly");
            console.error("   3. Webhook endpoint responds correctly");
            console.error("   4. WEBHOOK_SECRET is properly configured");
        }

        throw e;
    }
}
module.exports = { ensureWebhookRegistered };
