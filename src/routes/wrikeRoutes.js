const express = require( 'express' );
const router = express.Router();
const {generatePdf} = require( '../controllers/wrike/pdf.controller' );
const { uploadFileToWrike,addCommentToWrikeTask,updateWrikeTaskStatus,getWrikeTaskId} = require( '../controllers/wrike/wrike.controller' );
const {extractFileNameFromUrl} = require( "../shared/utils/article-name-extracting" );
const {handleWrikeWebhook} = require( "../controllers/wrike/wrike-webhook.controller" );
const {dotcmsApiClient} = require("../configurations/httpClients");


router.post('/send-for-review', async (req, res) => {
    const { url, taskId, persona } = req.body;

    // Input validation
    if (!url || !taskId) {
        return res.status(400).json({
            error: 'Missing required fields: url and taskId are required',
            received: { url: !!url, taskId: !!taskId, persona: !!persona }
        });
    }

    // Validate URL format
    try {
        const urlObj = new URL(url);
        if (!['http:', 'https:'].includes(urlObj.protocol)) {
            return res.status(400).json({
                error: 'Invalid URL: Only HTTP and HTTPS protocols are supported'
            });
        }
    } catch (urlError) {
        return res.status(400).json({
            error: 'Invalid URL format',
            details: urlError.message
        });
    }

    const startTime = Date.now();
    let wrikeTaskId = null;
    let pdfBuffer = null;
    let fileName = null;

    try {
        console.log(`🚀 Starting send-for-review process for task: ${taskId}, URL: ${url}`);

        // Step 1: Get Wrike task ID
        console.log('📋 Getting Wrike task ID...');
        wrikeTaskId = await getWrikeTaskId(taskId);
        console.log(`✅ Wrike task ID retrieved: ${wrikeTaskId}`);

        // Step 2: Generate PDF (only once!)
        console.log('📄 Generating PDF...');
        const pdfOptions = {
            timeout: 90000, // 90 seconds
            maxRetries: 2,
            stabilizeWait: 3000,
            fastMode: false, // Keep images for review
            format: 'A4',
            printBackground: true
        };

        pdfBuffer = await generatePdf(url, pdfOptions);
        console.log(`✅ PDF generated successfully (${pdfBuffer.length} bytes)`);

        // Step 3: Generate filename
        const timestamp = new Date().toISOString().slice(0, 16).replace(/[:T]/g, '-');
        const personaPrefix = persona ? `${persona.toLowerCase().replace(/\s+/g, '-')}-` : '';
        const domain = new URL(url).hostname.replace('www.', '');
        fileName = `${personaPrefix}review-${domain}-${timestamp}.pdf`;
        console.log(`📁 Generated filename: ${fileName}`);
        //
        // // Step 4: Upload file to Wrike
        // console.log('📤 Uploading PDF to Wrike...');
        // const uploadResult = await uploadFileToWrike(wrikeTaskId, pdfBuffer, fileName);
        // console.log('✅ PDF uploaded to Wrike successfully');
        //
        // // Step 5: Add comment to Wrike task
        // console.log('💬 Adding comment to Wrike task...');
        // const commentText = `PDF generated for review: ${url}\nFile: ${fileName}\nGenerated by: ${persona || 'System'}\nTimestamp: ${new Date().toISOString()}`;
        // await addCommentToWrikeTask(wrikeTaskId, commentText);
        // console.log('✅ Comment added to Wrike task');
        //
        // const duration = Date.now() - startTime;
        // console.log(`⏱️ Send-for-review process completed in ${duration}ms`);
        //
        // res.status(200).json({
        //     success: true,
        //     message: 'PDF generated, uploaded as attachment, and comment added to Wrike task.',
        //     details: {
        //         taskId: taskId,
        //         wrikeTaskId: wrikeTaskId,
        //         url: url,
        //         fileName: fileName,
        //         fileSize: pdfBuffer.length,
        //         persona: persona || null,
        //         processingTime: `${duration}ms`
        //     }
        // });

    } catch (error) {
        const duration = Date.now() - startTime;
        console.error(`❌ Send-for-review failed after ${duration}ms:`, error);

        // Categorize errors for better user feedback
        let statusCode = 500;
        let errorType = 'UNKNOWN_ERROR';
        let userMessage = 'An error occurred while processing your request.';

        if (error.message.includes('Navigation timeout') || error.message.includes('timeout')) {
            statusCode = 408;
            errorType = 'PDF_TIMEOUT_ERROR';
            userMessage = 'The webpage took too long to load. Please try again or check if the URL is accessible.';
        } else if (error.message.includes('Wrike') || error.message.includes('task')) {
            statusCode = 400;
            errorType = 'WRIKE_ERROR';
            userMessage = 'Failed to interact with Wrike. Please check the task ID and Wrike connection.';
        } else if (error.message.includes('PDF') || error.message.includes('generate')) {
            statusCode = 422;
            errorType = 'PDF_GENERATION_ERROR';
            userMessage = 'Failed to generate PDF from the provided URL.';
        } else if (error.message.includes('upload') || error.message.includes('file')) {
            statusCode = 507;
            errorType = 'UPLOAD_ERROR';
            userMessage = 'PDF generated successfully but failed to upload to Wrike.';
        }

        res.status(statusCode).json({
            success: false,
            error: userMessage,
            errorType: errorType,
            details: {
                message: error.message,
                taskId: taskId,
                wrikeTaskId: wrikeTaskId,
                url: url,
                fileName: fileName,
                processingTime: `${duration}ms`,
                step: getFailedStep(error.message)
            },
            suggestions: getSuggestions(errorType)
        });
    }
});

// Helper function to determine which step failed
function getFailedStep(errorMessage) {
    if (errorMessage.includes('getWrikeTaskId')) return 'Getting Wrike Task ID';
    if (errorMessage.includes('generatePdf') || errorMessage.includes('Navigation')) return 'PDF Generation';
    if (errorMessage.includes('uploadFileToWrike')) return 'File Upload';
    if (errorMessage.includes('addCommentToWrikeTask')) return 'Adding Comment';
    return 'Unknown Step';
}

// Helper function to provide troubleshooting suggestions
function getSuggestions(errorType) {
    const suggestions = {
        'PDF_TIMEOUT_ERROR': [
            'Try again with a simpler or faster-loading webpage',
            'Check if the URL is accessible from your network',
            'Contact support if the issue persists with multiple URLs'
        ],
        'WRIKE_ERROR': [
            'Verify the task ID is correct and exists in Wrike',
            'Check Wrike API credentials and permissions',
            'Ensure the Wrike task is not archived or deleted'
        ],
        'PDF_GENERATION_ERROR': [
            'Verify the URL is publicly accessible',
            'Try with a different webpage to test the system',
            'Check if the webpage requires authentication'
        ],
        'UPLOAD_ERROR': [
            'Check Wrike storage limits and permissions',
            'Verify network connectivity to Wrike',
            'Try again in a few minutes'
        ],
        'UNKNOWN_ERROR': [
            'Try the request again',
            'Check all input parameters',
            'Contact support if the issue persists'
        ]
    };

    return suggestions[errorType] || suggestions['UNKNOWN_ERROR'];
}

router.post( '/update-status',async ( req,res ) => {
    try{
        console.log(req.body);
        const {taskId,customStatus} = req.body;
        const id =  await getWrikeTaskId(taskId)
        console.log(id)
        const data = await updateWrikeTaskStatus(id, customStatus);
        return res.status(200).json({ ok: true, id, customStatus, data });
    } catch (e) {
        const status = e.response?.status || 502;
        return res.status(status).json({
            message: e.message,
            details: e.response?.data || e.details || null,
        });
    }
});
router.get('/puppeteer/path', (req, res) => {
    const p = typeof executablePath === 'function' ? executablePath() : '(unknown)';
    res.json({ path: p });
});
router.post("/webhook", handleWrikeWebhook);

module.exports = router;
